pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    volumeMounts:
    - name: harbor-creds
      mountPath: /kaniko/.docker
  - name: jnlp
    image: jenkins/inbound-agent:latest
    args: ['']
  volumes:
  - name: harbor-creds
    secret:
      secretName: harbor-creds
      items:
      - key: .dockerconfigjson
        path: config.json
"""
    }
  }

  environment {
    IMAGE_NAME = "harbor.locall:30004/jentest/nginx"
    IMAGE_TAG = "${BUILD_NUMBER}"
    FULL_IMAGE = "${IMAGE_NAME}:${IMAGE_TAG}"
  }

  stages {
    stage('Checkout') {
      steps {
        git credentialsId: 'github-token', url: 'https://github.com/hwseo0406/hwseo_site.git', branch: 'main'
      }
    }

    stage('Build & Push with Kaniko') {
      steps {
        container('kaniko') {
          sh '''
            /kaniko/executor \
              --context `pwd` \
              --dockerfile `pwd`/Dockerfile \
              --destination=${FULL_IMAGE} \
              --insecure \
              --skip-tls-verify
          '''
        }
      }
    }

    stage('Update Manifest') {
      steps {
        sh """
        sed -i 's|image: .*|image: ${FULL_IMAGE}|' jentest-deployment.yaml
        cat jentest-deployment.yaml
        """
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        withKubeConfig([credentialsId: 'k8s-config']) {
          sh 'kubectl apply -f jentest-deployment.yaml'
        }
      }
    }
  }

  post {
    success {
      echo "✅ 배포 성공: ${FULL_IMAGE}"
    }
    failure {
      echo "❌ 실패. 로그를 확인하세요."
    }
  }
}
